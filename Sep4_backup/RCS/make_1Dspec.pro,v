head	1.2;
access;
symbols;
locks
	stgilhool:1.2; strict;
comment	@# @;


1.2
date	2015.01.01.01.51.34;	author stgilhool;	state Exp;
branches;
next	1.1;

1.1
date	2014.12.31.16.03.26;	author stgilhool;	state Exp;
branches;
next	;


desc
@@


1.2
log
@First working version.  It outputs 1D spectra for objects and one NH3 spec for AB and BA positions.
Future features will include the ability to do only the objects, or only the flats, as well as the ability
to do multiple AB BA traces to correspond exactly to the trace of the object.  Also, masks are not implemented yet.
@
text
@pro make_1Dspec, epoch, object, mask=mask, no_flats=no_flats


;Error related info
gain=3.8d0 ;electrons/ADU
read_noise=68d0 ;electrons/NDR
dark_current=0.05d0 ;electrons/second
flat_time=0.5 ;seconds

;set file paths
rootpath='/home/stgilhool/RV_projects/IRCS_rv/data/'
epochpath=rootpath+'epoch/'+epoch+'/'
objectpath=rootpath+object+'/'+epoch+'/obs/'
flatpath=rootpath+'cal_files/'+epoch+'/'
outpath=epochpath+'final_spectra/'

if file_test(outpath, /directory) eq 0 then file_mkdir, outpath

;No mask for now, so
if n_elements(mask) eq 0 then mask=replicate(0, 1024)

;Start with reading in object frames
obj_list_file=epochpath+object+'_'+epoch+'_'+'1Dspec.list'

readcol, obj_list_file, obj_file_nameonly, format='A'
obj_file=epochpath+obj_file_nameonly
n_obj=n_elements(obj_file)

;Loop through each object file and process it
for f=0, n_obj-1 do begin

                                ;THIS PART RELIES ON THE ENDING BEING
                                ;.0001.fits WITH NO OTHER
                                ;PERIODS. PROBABLY SHOULD FIND A MORE
                                ;ELEGANT WAY
    outstr=strsplit(obj_file_nameonly[f], '.', /extract)
    outstr[1]='1D'
    obj_outfile=outpath+strjoin([strjoin([outstr[0],outstr[1]], '_'),outstr[2]], '.')
    
    obj_spec=mrdfits(obj_file[f], 0, obj_head, /dscale)*gain
    obj_spec_1D=total(obj_spec, 2, /double)

    exptime=sxpar(obj_head,'EXPTIME')
    ndr=sxpar(obj_head,'NDR')
    
    obj_var=obj_spec + (ndr*read_noise^2) + (exptime*dark_current)
    obj_var_1D=total(obj_var, 2, /double)
    obj_err=sqrt(obj_var_1D)

    obj_outstruct={header:obj_head, spectrum:obj_spec_1D, sigma:obj_err, mask:mask}

    mwrfits, obj_outstruct, obj_outfile, /create

endfor

for exp=1,1 do begin ;this is for when there are more extracted apertures for the flats

    for pattern=0, 1 do begin
        
        if pattern eq 0 then pat='_AB' else if pattern eq 1 then pat='_BA'
        
        list_ext=pat+strtrim(exp,2)+'.list'

        calONcellIN_list=epochpath+'calONcellIN_'+object+list_ext
        calOFFcellIN_list=epochpath+'calOFFcellIN_'+object+list_ext
        calONcellOUT_list=epochpath+'calONcellOUT_'+object+list_ext
        calOFFcellOUT_list=epochpath+'calOFFcellOUT_'+object+list_ext

;read in file names to string arrays
        readcol, calONcellIN_list, calONcellIN_file, format='A'
        readcol, calOFFcellIN_list, calOFFcellIN_file, format='A'
        readcol, calONcellOUT_list, calONcellOUT_file, format='A'
        readcol, calOFFcellOUT_list, calOFFcellOUT_file, format='A'
;add path to epochpath
        calONcellIN_file=epochpath+calONcellIN_file
        calOFFcellIN_file=epochpath+calOFFcellIN_file
        calONcellOUT_file=epochpath+calONcellOUT_file
        calOFFcellOUT_file=epochpath+calOFFcellOUT_file

;initialize arrays to store spectra and error data
        nflats=n_elements(calONcellIN_file)
        temp=mrdfits(calONcellIN_file[0], 0)
        ncols=n_elements(temp[0,*])
        nrows=n_elements(temp[*,0])

        calONcellIN_arr=dblarr(nflats, nrows, ncols)
        calOFFcellIN_arr=dblarr(nflats, nrows, ncols)
        calONcellOUT_arr=dblarr(nflats, nrows, ncols)
        calOFFcellOUT_arr=dblarr(nflats, nrows, ncols)

        calONcellIN_var=dblarr(nflats, nrows, ncols)
        calOFFcellIN_var=dblarr(nflats, nrows, ncols)
        calONcellOUT_var=dblarr(nflats, nrows, ncols)
        calOFFcellOUT_var=dblarr(nflats, nrows, ncols)


;Read in spectra in number of photo-electrons
        for file=0,nflats-1 do begin
    
            calONcellIN_arr[file, *, *]=mrdfits(calONcellIN_file[file], 0, /dscale)*gain
            calOFFcellIN_arr[file, *, *]=mrdfits(calOFFcellIN_file[file], 0, /dscale)*gain
            calONcellOUT_arr[file, *, *]=mrdfits(calONcellOUT_file[file], 0, /dscale)*gain
            calOFFcellOUT_arr[file, *, *]=mrdfits(calOFFcellOUT_file[file], 0, /dscale)*gain
            
        endfor

;variance at all pixels in each pixel in each flat
        calONcellIN_var=calONcellIN_arr + (read_noise^2) + (dark_current*flat_time)
        calOFFcellIN_var=calOFFcellIN_arr + (read_noise^2) + (dark_current*flat_time)
        calONcellOUT_var=calONcellOUT_arr + (read_noise^2) + (dark_current*flat_time)
        calOFFcellOUT_var=calOFFcellOUT_arr + (read_noise^2) + (dark_current*flat_time)
        
;Sum the columns and spectra to get total counts per pixel (DISABLED
;BECAUSE OF COSMIC RAYS)
        ;calONcellIN_tot=total(total(calONcellIN_arr, 3), 1)
        ;calOFFcellIN_tot=total(total(calOFFcellIN_arr, 3), 1)
        ;calONcellOUT_tot=total(total(calONcellOUT_arr, 3), 1)
        ;calOFFcellOUT_tot=total(total(calOFFcellOUT_arr, 3), 1)

        ;calONcellIN_tot_var=total(total(calONcellIN_var, 3),1)
        ;calOFFcellIN_tot_var=total(total(calOFFcellIN_var, 3),1)
        ;calONcellOUT_tot_var=total(total(calONcellOUT_var, 3),1)
        ;calOFFcellOUT_tot_var=total(total(calOFFcellOUT_var, 3),1)

;;;Try making 1D spectrum by throwing out the highest and lowest
;;;files at each pixel to counter cosmic rays, and then summing
        ;Make each file a 1D spectrum

         calONcellIN_1D_arr=total(calONcellIN_arr, 3)
         calOFFcellIN_1D_arr=total(calOFFcellIN_arr, 3)
         calONcellOUT_1D_arr=total(calONcellOUT_arr, 3)
         calOFFcellOUT_1D_arr=total(calOFFcellOUT_arr, 3)
        
         calONcellIN_1D_var=total(calONcellIN_var, 3)
         calOFFcellIN_1D_var=total(calOFFcellIN_var, 3)
         calONcellOUT_1D_var=total(calONcellOUT_var, 3)
         calOFFcellOUT_1D_var=total(calOFFcellOUT_var, 3)

         ;Find which files are max and min at each pixel
         maxONIN=max(calONcellIN_1D_arr, maxONINind, dimension=1, min=minONIN, subscript_min=minONINind)
         maxOFFIN=max(calOFFcellIN_1D_arr, maxOFFINind, dimension=1, min=minOFFIN, subscript_min=minOFFINind)
         maxOFFOUT=max(calOFFcellOUT_1D_arr, maxOFFOUTind, dimension=1, min=minOFFOUT, subscript_min=minOFFOUTind)
         maxONOUT=max(calONcellOUT_1D_arr, maxONOUTind, dimension=1, min=minONOUT, subscript_min=minONOUTind)

                                 ;Zero the max and min entries in both
                                 ;the spectrum and variance arrays
         calONcellIN_1D_arr[maxONINind,minONINind]=0d0
         calOFFcellIN_1D_arr[maxOFFINind,minOFFINind]=0d0
         calONcellOUT_1D_arr[maxONOUTind,minONOUTind]=0d0
         calOFFcellOUT_1D_arr[maxOFFOUTind,minOFFOUTind]=0d0
        
         calONcellIN_1D_var[maxONINind,minONINind]=0d0
         calOFFcellIN_1D_var[maxOFFINind,minOFFINind]=0d0
         calONcellOUT_1D_var[maxONOUTind,minONOUTind]=0d0
         calOFFcellOUT_1D_var[maxOFFOUTind,minOFFOUTind]=0d0

         ;Consolodate all to 1D
        
         calONcellIN_tot=total(calONcellIN_1D_arr, 1)
         calOFFcellIN_tot=total(calOFFcellIN_1D_arr, 1)
         calONcellOUT_tot=total(calONcellOUT_1D_arr, 1)
         calOFFcellOUT_tot=total(calOFFcellOUT_1D_arr, 1)

         calONcellIN_tot_var=total(calONcellIN_1D_var,1)
         calOFFcellIN_tot_var=total(calOFFcellIN_1D_var,1)
         calONcellOUT_tot_var=total(calONcellOUT_1D_var,1)
         calOFFcellOUT_tot_var=total(calOFFcellOUT_1D_var,1)


;Now take on-off
        cellIN_arr=calONcellIN_tot-calOFFcellIN_tot
        cellOUT_arr=calONcellOUT_tot-calOFFcellOUT_tot

;errors
        cellIN_arr_var=calONcellIN_tot_var+calOFFcellIN_tot_var
        cellOUT_arr_var=calONcellOUT_tot_var+calOFFcellOUT_tot_var

;Finally, do gc/nc
        observed_spectrum=cellIN_arr/cellOUT_arr
;errors
        var_final=(observed_spectrum^2)*((cellIN_arr_var/(cellIN_arr^2))+(cellOUT_arr_var/(cellOUT_arr^2)))
        error=sqrt(var_final)

        ;make final structure
        NH3_outstruct={nh3_spectrum:observed_spectrum,nh3_sigma:error,nh3_mask:mask}

        ;output structure
        NH3_outfile=outpath+'NH3_'+object+'_'+epoch+pat+strtrim(exp,2)+'.fits'

        mwrfits, NH3_outstruct, NH3_outfile, /create
        
    endfor
endfor



end



@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
function continuum_fit, x_vec, int, low_rej=low_rej, high_rej=high_rej, PIX_MASK=mask, verbose=verbose
a2 19
;Initialize arrays and loop variables
npix=n_elements(x_vec)
if n_elements(mask) eq 0 then mask=replicate(0,npix)
if n_elements(low_rej) eq 0 then low_rej=0.5
if n_elements(high_rej) eq 0 then high_rej=3.
if n_elements(verbose) eq 0 then verbose=0
n_iter=10
n_reject=0
n_reject_total=0
deg=5

;Apply pixel mask
unmask_index=where(mask eq 0)
x_vec=x_vec[unmask_index]
int=int[unmask_index]

;Copy vectors for iteration
x_vec_iter=x_vec
int_iter=int
d4 5
d10 29
a38 2
;;;;Iteratively fit the spectrum to approximate continuum
for iteration=1,n_iter do begin
d40 5
a44 6
    ;Fit a robust 5th degree polynomial to data
    fit_coeff=robust_poly_fit(x_vec_iter, int_iter, deg, fit_iter, sig)
   
    ;Define upper and lower rejection bounds
    upper_bound=fit_iter+(high_rej*sig)
    lower_bound=fit_iter-(low_rej*sig)
d46 5
a50 43
    ;Find the indices where the data are within the bounds
    keep_index=where(int_iter le upper_bound and int_iter ge lower_bound)
    
    ;And keep track of the points that are rejected
    rej_index=where(int_iter gt upper_bound or int_iter lt lower_bound, rej_count)
    if rej_count gt 0 then begin
        n_reject=n_elements(rej_index)
        n_reject_total=n_reject_total+n_reject
    endif else n_reject=0

;     ;Stop iterating if code rejects half of the data or more
;                                 NOTE: This needs to be fixed so as to
;                                 output the last iteration's fit!
;     if n_reject_total ge 0.5*n_elements(x_vec) then begin
;         if verbose ne 0 then print, "Too many rejections. Exiting loop at iteration number: ", iteration
;         break
;         endif

    ;Calculate RMSE
    rmse=sqrt(mean((fit_iter-int_iter)^2))

    ;Display fit if verbose is set
    if verbose ne 0 then begin
                                ;Plot the fit and rejected points
        window, 1, xsize=1300, ysize=650
        plot, x_vec, int, /xs
        oplot, x_vec_iter, fit_iter, color=200
        if rej_count gt 0 then oplot, x_vec_iter[rej_index], int_iter[rej_index], ps=7
        
                                ;Print the results
        print, "Iteration number: ", iteration
        print, "Coefficients: ", fit_coeff
        print, "Sigma: ", sig
        print, "Number of rejected points (current iteration): ", n_reject
        print, "Number of rejected points (in total): ", n_reject_total
        print, "RMSE: ", rmse
        print, ""
        ;stop
    endif

    ;Change x_vec_iter and int_iter according to rejection
    x_vec_iter=x_vec_iter[keep_index]
    int_iter=int_iter[keep_index]
d52 1
a52 1
endfor
a53 6
;create array to return
fit=dblarr(n_elements(int))
order=dblarr(n_elements(int))
for i=0,deg do begin
    order=fit_coeff[i]*(x_vec^i)
    fit=fit+order
d56 1
a56 3
;plot, x_vec, int, /xs
;oplot, x_vec, fit, color=200
;stop
d58 5
a62 3
return, fit

end
d64 31
a94 49
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;

pro process_flats, gc_on_list, gc_off_list, nc_on_list, nc_off_list

;set file names
filepath='/home/stgilhool/RV_projects/IRCS_rv/IRCS_flats/'
maskname='mask1D.fits'
gc_on_list='gc_on_list.txt'
gc_off_list='gc_off_list.txt'
nc_on_list='nc_on_list.txt'
nc_off_list='nc_off_list.txt'

gc_on_list=filepath+gc_on_list
gc_off_list=filepath+gc_off_list
nc_on_list=filepath+nc_on_list
nc_off_list=filepath+nc_off_list
maskfile=filepath+maskname

;read in mask
mask=mrdfits(maskfile,0,/dscale)

;read in file names
readcol, gc_on_list, gc_on_file, format='A'
readcol, gc_off_list, gc_off_file, format='A'
readcol, nc_on_list, nc_on_file, format='A'
readcol, nc_off_list, nc_off_file, format='A'
;add filepath
gc_on_file=filepath+gc_on_file
gc_off_file=filepath+gc_off_file
nc_on_file=filepath+nc_on_file
nc_off_file=filepath+nc_off_file

;initialize pointer arrays to store spectra and error data
nflats=n_elements(gc_on_file)
temp=mrdfits(gc_on_file[0], 0)
ncols=n_elements(temp[0,*])
nrows=n_elements(temp[*,0])

gc_on_arr=dblarr(nflats, nrows, ncols)
gc_off_arr=dblarr(nflats, nrows, ncols)
nc_on_arr=dblarr(nflats, nrows, ncols)
nc_off_arr=dblarr(nflats, nrows, ncols)

gc_on_var=dblarr(nflats, nrows, ncols)
gc_off_var=dblarr(nflats, nrows, ncols)
nc_on_var=dblarr(nflats, nrows, ncols)
nc_off_var=dblarr(nflats, nrows, ncols)
a96 7

;Error related info
gain=3.8d0 ;electrons/ADU
read_noise=68d0 ;electrons/NDR
dark_current=0.05d0 ;electrons/second
time=0.5 ;seconds

d98 8
a105 7
for file=0,nflats-1 do begin
    gc_on_arr[file, *, *]=mrdfits(gc_on_file[file], 0, /dscale)*gain
    gc_off_arr[file, *, *]=mrdfits(gc_off_file[file], 0, /dscale)*gain
    nc_on_arr[file, *, *]=mrdfits(nc_on_file[file], 0, /dscale)*gain
    nc_off_arr[file, *, *]=mrdfits(nc_off_file[file], 0, /dscale)*gain
                               
endfor
d108 60
a167 36
gc_on_var=gc_on_arr + (read_noise^2) + (dark_current*time)
gc_off_var=gc_off_arr + (read_noise^2) + (dark_current*time)
nc_on_var=nc_on_arr + (read_noise^2) + (dark_current*time)
nc_off_var=nc_off_arr + (read_noise^2) + (dark_current*time)

;sum along columns of pixels and take median of the flats to get
;single 1D spectra for gc/nc , on/off
;gc_on_med=median(total(gc_on_arr, 3), dimension=1, /double)
;gc_off_med=median(total(gc_off_arr, 3), dimension=1, /double)
;nc_on_med=median(total(nc_on_arr, 3), dimension=1, /double)
;nc_off_med=median(total(nc_off_arr, 3), dimension=1, /double)

;get the mean in a similar way
;gc_on_mean=mean(total(gc_on_arr, 3), dimension=1, /double)
;gc_off_mean=mean(total(gc_off_arr, 3), dimension=1, /double)
;nc_on_mean=mean(total(nc_on_arr, 3), dimension=1, /double)
;nc_off_mean=mean(total(nc_off_arr, 3), dimension=1, /double)

;Sum the columns and spectra to get total counts per pixel
gc_on_tot=total(total(gc_on_arr, 3), 1)
gc_off_tot=total(total(gc_off_arr, 3), 1)
nc_on_tot=total(total(nc_on_arr, 3), 1)
nc_off_tot=total(total(nc_off_arr, 3), 1)

gc_on_tot_var=total(total(gc_on_var, 3),1)
gc_off_tot_var=total(total(gc_off_var, 3),1)
nc_on_tot_var=total(total(nc_on_var, 3),1)
nc_off_tot_var=total(total(nc_off_var, 3),1)
;SNR is reduced by the following factor when taking the median
;median_factor=sqrt(!PI/(2*nflats))

;calculate noise in the various spectra
;gc_on_err=median(sqrt(total(gc_on_var, 3)), dimension=1, /double)*median_factor
;gc_off_err=median(sqrt(total(gc_off_var, 3)), dimension=1, /double)*median_factor
;nc_on_err=median(sqrt(total(nc_on_var, 3)), dimension=1, /double)*median_factor
;nc_off_err=median(sqrt(total(nc_off_var, 3)), dimension=1, /double)*median_factor
d171 3
a173 2
gc_arr=gc_on_tot-gc_off_tot
nc_arr=nc_on_tot-nc_off_tot
d175 2
a176 4
;gc_err=sqrt((gc_on_err^2)+(gc_off_err^2))
;nc_err=sqrt((nc_on_err^2)+(nc_off_err^2))
gc_arr_var=gc_on_tot_var+gc_off_tot_var
nc_arr_var=nc_on_tot_var+nc_off_tot_var
d179 1
a179 1
observed_spectrum=gc_arr/nc_arr
d181 13
a193 2
var_final=(observed_spectrum^2)*((gc_arr_var/(gc_arr^2))+(nc_arr_var/(nc_arr^2)))
error=sqrt(var_final)
a194 3
out_str={nh3_spec:observed_spectrum,nh3_err:error,nh3_mask:mask}
outfile='NH3_obs.fits'
mwrfits, out_str, outfile, /create
a195 1
stop
a200 27

;gc_off_arr=ptrarr(nflats, /allocate_heap)
;nc_on_arr=ptrarr(nflats, /allocate_heap)
;nc_off_arr=ptrarr(nflats, /allocate_heap)

;gc_on_err=ptrarr(nflats, /allocate_heap)
;gc_off_err=ptrarr(nflats, /allocate_heap)
;nc_on_err=ptrarr(nflats, /allocate_heap)
;nc_off_err=ptrarr(nflats, /allocate_heap)

;     *gc_on_arr[file]=mrdfits(gc_on_file[file], 0, /dscale)
;     *gc_off_arr[file]=mrdfits(gc_off_file[file], 0, /dscale)
;     *nc_on_arr[file]=mrdfits(nc_on_file[file], 0, /dscale)
;     *nc_off_arr[file]=mrdfits(nc_off_file[file], 0, /dscale)

;     *gc_on_err[file]=sqrt(total(*gc_on_arr[file],2)+$
;                           (ncols*(read_noise^2))+$
;                           (time*dark_current*ncols))
;     *gc_off_err[file]=sqrt(total(*gc_off_arr[file],2)+$
;                            (ncols*(read_noise^2))+$
;                            (time*dark_current*ncols))
;     *nc_on_err[file]=sqrt(total(*nc_on_arr[file],2)+$
;                           (ncols*(read_noise^2))+$
;                           (time*dark_current*ncols))
;     *nc_off_err[file]=sqrt(total(*nc_off_arr[file],2)+$
;                            (ncols*(read_noise^2))+$
;                            (time*dark_current*ncols))
@
