
function continuum_fit, x_vec, int, low_rej=low_rej, high_rej=high_rej, PIX_MASK=mask, verbose=verbose

;Initialize arrays and loop variables
npix=n_elements(x_vec)
if n_elements(mask) eq 0 then mask=replicate(0,npix)
if n_elements(low_rej) eq 0 then low_rej=0.5
if n_elements(high_rej) eq 0 then high_rej=3.
if n_elements(verbose) eq 0 then verbose=0
n_iter=10
n_reject=0
n_reject_total=0
deg=5

;Apply pixel mask
unmask_index=where(mask eq 0)
x_vec=x_vec[unmask_index]
int=int[unmask_index]

;Copy vectors for iteration
x_vec_iter=x_vec
int_iter=int


;;;;Iteratively fit the spectrum to approximate continuum
for iteration=1,n_iter do begin
    
    ;Fit a robust 5th degree polynomial to data
    fit_coeff=robust_poly_fit(x_vec_iter, int_iter, deg, fit_iter, sig)
   
    ;Define upper and lower rejection bounds
    upper_bound=fit_iter+(high_rej*sig)
    lower_bound=fit_iter-(low_rej*sig)
    
    ;Find the indices where the data are within the bounds
    keep_index=where(int_iter le upper_bound and int_iter ge lower_bound)
    
    ;And keep track of the points that are rejected
    rej_index=where(int_iter gt upper_bound or int_iter lt lower_bound, rej_count)
    if rej_count gt 0 then begin
        n_reject=n_elements(rej_index)
        n_reject_total=n_reject_total+n_reject
    endif else n_reject=0

;     ;Stop iterating if code rejects half of the data or more
;                                 NOTE: This needs to be fixed so as to
;                                 output the last iteration's fit!
;     if n_reject_total ge 0.5*n_elements(x_vec) then begin
;         if verbose ne 0 then print, "Too many rejections. Exiting loop at iteration number: ", iteration
;         break
;         endif

    ;Calculate RMSE
    rmse=sqrt(mean((fit_iter-int_iter)^2))

    ;Display fit if verbose is set
    if verbose ne 0 then begin
                                ;Plot the fit and rejected points
        window, 1, xsize=1300, ysize=650
        plot, x_vec, int, /xs
        oplot, x_vec_iter, fit_iter, color=200
        if rej_count gt 0 then oplot, x_vec_iter[rej_index], int_iter[rej_index], ps=7
        
                                ;Print the results
        print, "Iteration number: ", iteration
        print, "Coefficients: ", fit_coeff
        print, "Sigma: ", sig
        print, "Number of rejected points (current iteration): ", n_reject
        print, "Number of rejected points (in total): ", n_reject_total
        print, "RMSE: ", rmse
        print, ""
        ;stop
    endif

    ;Change x_vec_iter and int_iter according to rejection
    x_vec_iter=x_vec_iter[keep_index]
    int_iter=int_iter[keep_index]

endfor

;create array to return
fit=dblarr(n_elements(int))
order=dblarr(n_elements(int))
for i=0,deg do begin
    order=fit_coeff[i]*(x_vec^i)
    fit=fit+order
endfor

;plot, x_vec, int, /xs
;oplot, x_vec, fit, color=200
;stop

return, fit

end


function amoebafunction, p

common amoeba_info, wl_lab, int_lab, int_obs


;;;Parameters from amoeba
wl_0=p[0]
wl_1=p[1]
wl_2=p[2]
wl_3=p[3]
sigma=p[4]
;npix_lsf=p[5]
tau_scale=p[5]
low_reject=p[6]
high_reject=p[7]

;Other parameters and constants
npix_lsf=10*sigma
c=299792458.D
npix=1024L
oversamp=11L

;Normalize the model spectrum
norm=continuum_fit(wl_lab, int_lab, low_rej=low_reject, high_rej=high_reject)
int_lab_norm=int_lab/norm


;Adjust the optical depth of the lab spectrum (I think this is okay to
;do for the high-resolution spectrum even though the wl scale isn't linear)
int_lab_depth=int_lab_norm^tau_scale


;;;Contstruct wl array and oversampled wl array from coeffs
x=dindgen(npix)
xx=dindgen(npix*oversamp)
;freeparam_0=replicate(wl_0, npix)
;freeparam_1=wl_1*x
;freeparam_2=wl_2*(x^2)
;freeparam_3=wl_3*(x^3)
;trial_soln=freeparam_0+freeparam_1+freeparam_2+freeparam_3
coeff=[wl_0, wl_1, wl_2, wl_3]
trial_soln=poly(x, coeff)
samp_index=(indgen(npix)*oversamp)+(oversamp/2)
trial_soln_over=interpol(trial_soln, samp_index, xx)


;Interpolate the lab spectrum onto the oversampled trial grid
int_lab_over=interpol(int_lab_depth, wl_lab, trial_soln_over)


;Convolve model with trial lsf
;Make lsf
trial_lsf=gaussian_function(sigma, /normalize, width=npix_lsf)
;int_lab_conv=gauss_smooth(int_lab_depth, sigma)
int_lab_conv=convol(int_lab_over, trial_lsf);, /norm)

;Down-sample the model to IRCS resolution
npix_tophat=oversamp
tophat=replicate(1d0/npix_tophat,npix_tophat)
int_lab_avg=convol(int_lab_conv, tophat)
int_model=int_lab_avg[samp_index] 


;;;Get chi^2
err=0
chi2=0
 for pixel=69, npix-70 do begin  ;cut off 50 pixels on either end
   
     err=((int_obs[pixel]-int_model[pixel])^2);/(error[pixel]^2)
    
     chi2=chi2+err
    
 endfor


;;;Do animation of fitting spectrum for full spectrum
 !p.multi=0
 
plot, trial_soln, int_obs , /xs, yr=[0,1.5];, xr=[2.31,2.32]
oplot, trial_soln, int_model, color=200 
wait, 0.05

print, chi2

randomstop=randomu(seed)
if randomstop le 0.01 then stop

return, chi2

end

pro IRCS_cal

common amoeba_info, wl_lab, int_lab, int_obs

;read in both spectra
readcol, 'NH3_model.dat', wl_lab, int_lab, format='D,D'
readcol, 'NH3_obs.dat', trash, int_obs_backwards, format='I,D'

;flip the spectrum to read low to high
int_obs=reverse(int_obs_backwards)

;directly compare them using AMOEBA
;;;;;;;;;;;;;;;;;;;;;;
;;;  Run amoeba   ;;;;
;;;;;;;;;;;;;;;;;;;;;;

;;;Define amoeba inputs
ftol=1e-10
;;;Define entries in guess vector
;define delta wl
del_wl=1d-4 

;guess0=0.d                   ;guess for rv
guess1=2.295d0                     ;guess for wl_param_0
guess2=0.6d0*del_wl                     ;guess for wl_param_1
guess3=0d                     ;guess for wl_param_2
guess4=0d                     ;guess for wl_param_3
guess5=8d			;guess for gaussian sigma
guess6=1.7d	  		;guess for tau
guess7=0.5			;guess for low_rej
guess8=3.			;guess for high_rej
;guess3=5d-6                     ;guess for spec_shift_0
;guess4=5d-8                     ;guess for spec_shift_1
;;;Define entries in scale vector
;scale0=1000.d
scale1=10*del_wl
scale2=0.1d0*del_wl
scale3=1d-8
scale4=1d-10
scale5=4d
scale6=0.3d
scale7=0.25
scale8=1.
;;;Define guess and scale vectors
guess=[guess1,guess2,guess3,guess4,guess5,guess6,guess7,guess8]
scale=[scale1,scale2,scale3,scale4,scale5,scale6,scale7,scale8]

!p.multi=[0,2,2]
;;;Run amoeba
r=amoeba3(ftol, scale=scale, p0=guess,function_name='amoebafunction', $
         function_value=fval, nmax=2000)
 if n_elements(r) ne 0 then begin ;if amoeba returns a result
     ;velocity[file_num]=r[0]
     wl_param0=r[0]
     wl_param1=r[1]
     wl_param2=r[2]
     wl_param3=r[3]
     chi2_all=fval[0]
     
 endif else begin ;if amoeba doesn't return a result
     ;velocity=!Values.F_NaN
     wl_param0=!Values.F_NaN
     wl_param1=!Values.F_NaN
     wl_param2=!Values.F_NaN
     wl_param3=!Values.F_NaN
     chi2_all=!Values.F_NaN
     
 endelse

!p.multi=0

;;;Print final results for a given file
;print, "File: ", file_num
;print, "RV: ", velocity[file_num]
print, "WL_0: ", wl_param0
print, "WL_1: ", wl_param1
print, "WL_2: ", wl_param2
print, "WL_3: ", wl_param3
print, "LSF_sigma: ", r[4]
print, "Optical_depth", r[5]
print, "low_rej", r[6]
print, "high_rej", r[7]
print, "Chi^2: ", fval[0]
stop

;;;Write to file
;output_file='result_'+result_label+'_epoch.fits'
;if epoch_num eq initial_epoch then mwrfits, mjd, output_file, /create $
;else mwrfits, mjd, output_file
;mwrfits, velocity, output_file
;mwrfits, mjd_epoch, output_file
;mwrfits, avg_rv, output_file
;mwrfits, err_bar, output_file
;mwrfits, chi2_all, output_file
;mwrfits, wl_param0, output_file
;mwrfits, wl_param1, output_file 
end
